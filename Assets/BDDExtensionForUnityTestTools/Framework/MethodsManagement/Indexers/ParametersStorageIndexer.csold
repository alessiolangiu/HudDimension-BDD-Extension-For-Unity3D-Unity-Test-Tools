using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEngine;

namespace UnityTestBDD
{
    public class ParametersStorageIndexer
    {
        private Dictionary<Type, FieldInfo> parametersStorageDictionaryByType;
        private Dictionary<string, FieldInfo> parametersStorageDictionaryByName;
        private List<Type> parameterClassStorageList;

        public Dictionary<Type, FieldInfo> ParametersStorageDictionaryByType
        {
            get
            {
                if (parametersStorageDictionaryByType == null)
                {
                    RebuildParametersStorageIndex();
                }
                return parametersStorageDictionaryByType;
            }

        }

        public Dictionary<string, FieldInfo> ParametersStorageDictionaryByName
        {
            get
            {
                if (parametersStorageDictionaryByName == null)
                {
                    RebuildParametersStorageIndex();
                }
                return parametersStorageDictionaryByName;
            }

        }

        public ParametersStorageIndexer(List<Type> parameterClassStorageList)
        {
            this.parameterClassStorageList = parameterClassStorageList;
            RebuildParametersStorageIndex();
        }

        private void RebuildParametersStorageIndex()
        {
            parametersStorageDictionaryByType = new Dictionary<Type, FieldInfo>();
            parametersStorageDictionaryByName = new Dictionary<string, FieldInfo>();

            foreach (Type type in parameterClassStorageList)
            {
                FieldInfo[] fieldInfoArray=type.GetFields();
                foreach(FieldInfo field in fieldInfoArray)
                {
                    object[] customAttributes=field.GetCustomAttributes(typeof(ValuesArrayStorage), true);
                    if (customAttributes.Count() > 0)
                    {
                        parametersStorageDictionaryByType.Add(field.FieldType, field);
                        parametersStorageDictionaryByName.Add(type.Name + "." + field.Name, field);
                    }
                }
            }
           
        }

    }
}
