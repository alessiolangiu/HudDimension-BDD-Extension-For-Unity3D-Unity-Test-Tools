using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

namespace UnityTestBDD
{
    public class UnityTestToolsBDDExtensionParametersIndexer
    {

        private readonly string _string = "_string";
        private readonly string _int = "_int";
        private readonly string _double = "_double";
        private readonly string _float = "_float";
        private readonly string _bool = "_bool";
        private readonly string _GameObject = "_GameObject";
        private readonly string _Rect = "_Rect";
        private readonly string _Vector2 = "_Vector2";
        private readonly string _Vector3 = "_Vector3";

        private List<string> givenParametersIndexesList;
        private List<string> whenParametersIndexesList;
        private List<string> thenParametersIndexesList;

        private List<string> _stringList;
        private List<int> _intList;
        private List<double> _doubleList;
        private List<float> _floatList;
        private List<bool> _boolList;
        private List<GameObject> _GameObjectList;
        private List<Rect> _RectList;
        private List<Vector2> _Vector2List;
        private List<Vector3> _Vector3List;

        UnityTestToolsBDDExtensionRunner script;

        public UnityTestToolsBDDExtensionParametersIndexer(UnityTestToolsBDDExtensionRunner script)
        {
                this.script=script;
        }

        public void RebuildParametersIndexes()
        {
            List<UnityTestToolsBDDExtensionMethodDescription> givenMethodsList = UnityTestToolsBDDExtensionMethodsFinder.GetMethodsFromGameObjectComponents(script.gameObject, typeof(Given));
            List<UnityTestToolsBDDExtensionMethodDescription> whenMethodsList = UnityTestToolsBDDExtensionMethodsFinder.GetMethodsFromGameObjectComponents(script.gameObject, typeof(When));
            List<UnityTestToolsBDDExtensionMethodDescription> thenMethodsList = UnityTestToolsBDDExtensionMethodsFinder.GetMethodsFromGameObjectComponents(script.gameObject, typeof(Then));

            List<UnityTestToolsBDDExtensionMethodDescription> givenChoosenMethodsDescriptions = loadParametersValues(script, givenMethodsList, script.given, script.givenParametersIndex);
            List<UnityTestToolsBDDExtensionMethodDescription> whenChoosenMethodsDescriptions = loadParametersValues(script, whenMethodsList, script.when, script.whenParametersIndex);
            List<UnityTestToolsBDDExtensionMethodDescription> thenChoosenMethodsDescriptions = loadParametersValues(script, thenMethodsList, script.then, script.thenParametersIndex);



            givenParametersIndexesList = new List<string>();
            whenParametersIndexesList = new List<string>();
            thenParametersIndexesList = new List<string>();

            _stringList = new List<string>();
            _intList = new List<int>();
            _doubleList = new List<double>();
            _floatList = new List<float>();
            _boolList = new List<bool>();
            _GameObjectList = new List<GameObject>();
            _RectList = new List<Rect>();
            _Vector2List = new List<Vector2>();
            _Vector3List = new List<Vector3>();

            buildParametersIndexes(givenChoosenMethodsDescriptions, script.given, givenParametersIndexesList);
            buildParametersIndexes(whenChoosenMethodsDescriptions, script.when, whenParametersIndexesList);
            buildParametersIndexes(thenChoosenMethodsDescriptions, script.then, thenParametersIndexesList);

            persistAllParametersIndexes(script);
        }

        internal UnityTestToolsBDDExtensionMethodDescription LoadParameters(UnityTestToolsBDDExtensionMethodDescription mainMethod, string parametersIndex, UnityTestToolsBDDExtensionRunner script)
        {
            UnityTestToolsBDDExtensionMethodDescription result = null;
            if (mainMethod != null)
            {
                result = (UnityTestToolsBDDExtensionMethodDescription)mainMethod.Clone();
                foreach (UnityTestToolsBDDExtensionMethodParameter parameter in result.parameters)
                {
                   
                        string valueLocation = findParameterValueLocation(result.method.Name + "." + parameter.parameterInfo.Name, parametersIndex);
                        parameter.value = getParameterValueFromLocation(script, valueLocation, parameter.parameterInfo.ParameterType);
                   
                }

            }
            return result;
        }

        public static string findParameterValueLocation(string parameterName, string paramitersIndex)
        {
            string[] parametersList = paramitersIndex.Split(';');
            string location = null;
            foreach (string parameterIndex in parametersList)
            {
                string[] parameterIndexSplitted = parameterIndex.Split(',');
                //Format: parameterName,parameterLocation
                if (parameterIndexSplitted[0].Equals(parameterName))
                {
                    location = parameterIndexSplitted[1];
                }
            }
            return location;

        }

        private object getParameterValueFromLocation(UnityTestToolsBDDExtensionRunner script, string location, Type parameterType)
        {
            object result = null;
            //Format arrayName.Array.data[index]
            if (location != null)
            {
                string arrayName = location.Split('.')[0];
                int index = int.Parse(location.Split('[')[1].Split(']')[0]);
                if (arrayName.Equals(_string) && parameterType == typeof(string))
                {
                    result = script._string[index];
                }
                else if (arrayName.Equals(_int) && parameterType == typeof(int))
                {
                    result = script._int[index];
                }
                else if (arrayName.Equals(_double) && parameterType == typeof(double))
                {
                    result = script._double[index];
                }
                else if (arrayName.Equals(_float) && parameterType == typeof(float))
                {
                    result = script._float[index];
                }
                else if (arrayName.Equals(_bool) && parameterType == typeof(bool))
                {
                    result = script._bool[index];
                }
                else if (arrayName.Equals(_GameObject) && parameterType == typeof(GameObject))
                {
                    result = script._GameObject[index];
                }
                else if (arrayName.Equals(_Rect) && parameterType == typeof(Rect))
                {
                    result = script._Rect[index];
                }
                else if (arrayName.Equals(_Vector2) && parameterType == typeof(Vector2))
                {
                    result = script._Vector2[index];
                }
                else if (arrayName.Equals(_Vector3) && parameterType == typeof(Vector3))
                {
                    result = script._Vector3[index];
                }
            }
            return result;
        }

        private void persistAllParametersIndexes(UnityTestToolsBDDExtensionRunner script)
        {
            script.givenParametersIndex = givenParametersIndexesList.ToArray();
            script.whenParametersIndex = whenParametersIndexesList.ToArray();
            script.thenParametersIndex = thenParametersIndexesList.ToArray();

            script._int = _intList.ToArray();
            script._string = _stringList.ToArray();
            script._double = _doubleList.ToArray();
            script._float = _floatList.ToArray();
            script._bool = _boolList.ToArray();
            script._GameObject = _GameObjectList.ToArray();
            script._Rect = _RectList.ToArray();
            script._Vector2 = _Vector2List.ToArray();
            script._Vector3 = _Vector3List.ToArray();


        }

        private void buildParametersIndexes(List<UnityTestToolsBDDExtensionMethodDescription> methodsList, string[] selectedMethods, List<string> parametersIndex)
        {
            for (int index = 0; index < selectedMethods.Length; index++)
            {
                //UnityTestToolsExtensionGWTMethodDescription method = UnityTestToolsExtensionGWTMethodsFinder.getMethodDescriptionFor(methodsList, selectedMethods[index]);                
                UnityTestToolsBDDExtensionMethodDescription method = methodsList[index];
                if (method != null)
                {
                    List<string> listOfParametersLocationsPerMethod = new List<string>();
                    foreach (UnityTestToolsBDDExtensionMethodParameter parameter in method.parameters)
                    {
                        string parameterLocation = indexParameterValue(method.method.Name, parameter);
                        listOfParametersLocationsPerMethod.Add(parameterLocation);
                    }
                    string parametersIndexPerMethod = "";
                    foreach (string parameterLocation in listOfParametersLocationsPerMethod)
                    {
                        parametersIndexPerMethod += ";" + parameterLocation;
                    }
                    parametersIndex.Add(parametersIndexPerMethod);
                }
            }
        }

        private string indexParameterValue(string methodName, UnityTestToolsBDDExtensionMethodParameter parameter)
        {
            string result = null;
            Type pt = parameter.parameterInfo.ParameterType;
            if (pt == typeof(int))
            {
                _intList.Add(parameter.value == null ? 0 : (int)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_int.Array.data[" + (_intList.Count - 1) + "]";
            }
            else if (pt == typeof(string))
            {
                _stringList.Add((string)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_string.Array.data[" + (_stringList.Count - 1) + "]";
            }
            else if (pt == typeof(double))
            {
                _doubleList.Add(parameter.value == null ? 0 : (double)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_double.Array.data[" + (_doubleList.Count - 1) + "]";
            }
            else if (pt == typeof(float))
            {
                _floatList.Add(parameter.value == null ? 0 : (float)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_float.Array.data[" + (_floatList.Count - 1) + "]";
            }
            else if (pt == typeof(bool))
            {
                _boolList.Add(parameter.value == null ? false : (bool)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_bool.Array.data[" + (_boolList.Count - 1) + "]";
            }
            else if (pt == typeof(GameObject))
            {
                _GameObjectList.Add((GameObject)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_GameObject.Array.data[" + (_GameObjectList.Count - 1) + "]";
            }
            else if (pt == typeof(Vector2))
            {
                _Vector2List.Add(parameter.value == null ? Vector2.zero : (Vector2)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_Vector2.Array.data[" + (_Vector2List.Count - 1) + "]";
            }
            else if (pt == typeof(Vector3))
            {
                _Vector3List.Add(parameter.value == null ? Vector3.zero : (Vector3)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_Vector3.Array.data[" + (_Vector3List.Count - 1) + "]";
            }
            else if (pt == typeof(Rect))
            {
                _RectList.Add(parameter.value == null ? Rect.zero : (Rect)parameter.value);
                //parameterName,arrayName.Array.data[index]
                result = methodName + "." + parameter.parameterInfo.Name + "," + "_Rect.Array.data[" + (_RectList.Count - 1) + "]";
            }
            return result;
        }

        private List<UnityTestToolsBDDExtensionMethodDescription> loadParametersValues(UnityTestToolsBDDExtensionRunner script, List<UnityTestToolsBDDExtensionMethodDescription> methodsList, string[] selectedMethods, string[] parametersIndex)
        {
            List<UnityTestToolsBDDExtensionMethodDescription> result = new List<UnityTestToolsBDDExtensionMethodDescription>();
            for (int index = 0; index < selectedMethods.Length; index++)
            {
                UnityTestToolsBDDExtensionMethodDescription method = UnityTestToolsBDDExtensionMethodsFinder.getMethodDescriptionFor(methodsList, selectedMethods[index]);
                UnityTestToolsBDDExtensionMethodDescription clonedMethod = null;
                if (method != null)
                {
                    clonedMethod = (UnityTestToolsBDDExtensionMethodDescription)method.Clone();
                    foreach (UnityTestToolsBDDExtensionMethodParameter parameter in clonedMethod.parameters)
                    {
                        if (parametersIndex != null && parametersIndex.Length >= index + 1)
                        {
                            string valueLocation = findParameterValueLocation(clonedMethod.method.Name + "." + parameter.parameterInfo.Name, parametersIndex[index]);
                            parameter.value = getParameterValueFromLocation(script, valueLocation, parameter.parameterInfo.ParameterType);
                        }
                        else
                        {
                            parameter.value = null;
                        }
                    }

                }
                result.Add(clonedMethod);


            }
            return result;
        }



    }
}
